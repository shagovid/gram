// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rossgram.Infrastructure.Database;

#nullable disable

namespace Rossgram.Infrastructure.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Rossgram.Domain.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AvatarId")
                        .HasColumnType("bigint");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Following", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("FollowerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Followings");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.History", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("UploadedFileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UploadedFileId")
                        .IsUnique();

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.LogRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.Conversation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ConversationType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Conversations");

                    b.HasDiscriminator<int>("ConversationType");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.GroupConversationMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupConversationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GroupConversationId");

                    b.ToTable("GroupsConversationsMembers");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AfterEditMessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AfterEditMessageId")
                        .IsUnique();

                    b.HasIndex("ConversationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.MessageAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageAttachment");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.MessageLike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("OwnerId");

                    b.ToTable("MessagesLikes");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.PostAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AttachmentType")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostsAttachments");

                    b.HasDiscriminator<int>("AttachmentType");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.PostComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PostId");

                    b.ToTable("PostsComments");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.PostCommentLike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("OwnerId");

                    b.ToTable("PostsCommentsLikes");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.PostLike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PostId");

                    b.ToTable("PostsLikes");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.ReservedNickname", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.ToTable("ReservedNicknames");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.UploadedFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ObjectsStorageKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("Rossgram.Domain.Views.AccountView", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AvatarId")
                        .HasColumnType("bigint");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FollowerCount")
                        .HasColumnType("integer");

                    b.Property<int>("FollowingCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PostsCount")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.ToView("AccountView");
                });

            modelBuilder.Entity("Rossgram.Domain.Views.MessageView", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AfterEditMessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<int>("LikesCount")
                        .HasColumnType("integer");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AfterEditMessageId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("OwnerId");

                    b.ToView("MessageView");
                });

            modelBuilder.Entity("Rossgram.Domain.Views.PostCommentView", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LikesCount")
                        .HasColumnType("integer");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PostId");

                    b.ToView("PostCommentView");
                });

            modelBuilder.Entity("Rossgram.Domain.Views.PostView", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LikesCount")
                        .HasColumnType("integer");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToView("PostView");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.GroupConversation", b =>
                {
                    b.HasBaseType("Rossgram.Domain.Entities.Messages.Conversation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.MessageFileAttachment", b =>
                {
                    b.HasBaseType("Rossgram.Domain.Entities.Messages.MessageAttachment");

                    b.Property<long>("UploadedFileId")
                        .HasColumnType("bigint");

                    b.HasIndex("UploadedFileId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.MessageHistoryAttachment", b =>
                {
                    b.HasBaseType("Rossgram.Domain.Entities.Messages.MessageAttachment");

                    b.Property<long>("HistoryId")
                        .HasColumnType("bigint");

                    b.HasIndex("HistoryId");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.MessageLinkAttachment", b =>
                {
                    b.HasBaseType("Rossgram.Domain.Entities.Messages.MessageAttachment");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.MessagePostAttachment", b =>
                {
                    b.HasBaseType("Rossgram.Domain.Entities.Messages.MessageAttachment");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PostViewId")
                        .HasColumnType("bigint");

                    b.HasIndex("PostId");

                    b.HasIndex("PostViewId");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.PrivateConversation", b =>
                {
                    b.HasBaseType("Rossgram.Domain.Entities.Messages.Conversation");

                    b.Property<long>("NewerAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("OlderAccountId")
                        .HasColumnType("bigint");

                    b.HasIndex("NewerAccountId");

                    b.HasIndex("OlderAccountId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.PostAttachmentFile", b =>
                {
                    b.HasBaseType("Rossgram.Domain.Entities.Posts.PostAttachment");

                    b.Property<long>("UploadedFileId")
                        .HasColumnType("bigint");

                    b.HasIndex("UploadedFileId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.PostAttachmentLink", b =>
                {
                    b.HasBaseType("Rossgram.Domain.Entities.Posts.PostAttachment");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Account", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.UploadedFile", "Avatar")
                        .WithOne()
                        .HasForeignKey("Rossgram.Domain.Entities.Account", "AvatarId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("Rossgram.Domain.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<long>("AccountId")
                                .HasColumnType("bigint");

                            b1.Property<byte[]>("Hash")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("Avatar");

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Following", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Account", "Account")
                        .WithMany("Followers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.AccountView", null)
                        .WithMany("Followers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Entities.Account", "Follower")
                        .WithMany("Followings")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.AccountView", null)
                        .WithMany("Followings")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.History", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Account", "Owner")
                        .WithMany("Histories")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Entities.UploadedFile", "UploadedFile")
                        .WithOne()
                        .HasForeignKey("Rossgram.Domain.Entities.History", "UploadedFileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.GroupConversationMember", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Account", "Account")
                        .WithMany("GroupsConversationsMember")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.AccountView", null)
                        .WithMany("GroupsConversationsMember")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Entities.Messages.GroupConversation", "GroupConversation")
                        .WithMany("Members")
                        .HasForeignKey("GroupConversationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("GroupConversation");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.Message", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Messages.Message", "AfterEditMessage")
                        .WithOne("BeforeEditMessage")
                        .HasForeignKey("Rossgram.Domain.Entities.Messages.Message", "AfterEditMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Rossgram.Domain.Views.MessageView", null)
                        .WithOne("BeforeEditMessage")
                        .HasForeignKey("Rossgram.Domain.Entities.Messages.Message", "AfterEditMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Rossgram.Domain.Entities.Messages.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Entities.Account", "Owner")
                        .WithMany("SentMessages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.AccountView", null)
                        .WithMany("SentMessages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AfterEditMessage");

                    b.Navigation("Conversation");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.MessageAttachment", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Messages.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.MessageView", null)
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.MessageLike", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Messages.Message", "Message")
                        .WithMany("Likes")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.MessageView", null)
                        .WithMany("Likes")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Entities.Account", "Owner")
                        .WithMany("MessagesLikes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.AccountView", null)
                        .WithMany("MessagesLikes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.Post", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Account", "Owner")
                        .WithMany("Posts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.AccountView", null)
                        .WithMany("Posts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.PostAttachment", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Posts.Post", "Post")
                        .WithMany("Attachments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.PostView", null)
                        .WithMany("Attachments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.PostComment", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Account", "Owner")
                        .WithMany("PostsComments")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.AccountView", null)
                        .WithMany("PostsComments")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Entities.Posts.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.PostView", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.PostCommentLike", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Posts.PostComment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.PostCommentView", null)
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Entities.Account", "Owner")
                        .WithMany("PostCommentsLikes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.AccountView", null)
                        .WithMany("PostCommentsLikes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.PostLike", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Account", "Owner")
                        .WithMany("PostsLikes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.AccountView", null)
                        .WithMany("PostsLikes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Entities.Posts.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.PostView", null)
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.UploadedFile", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Account", "Owner")
                        .WithMany("UploadedFiles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.AccountView", null)
                        .WithMany("UploadedFiles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Rossgram.Domain.Views.AccountView", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.UploadedFile", "Avatar")
                        .WithOne()
                        .HasForeignKey("Rossgram.Domain.Views.AccountView", "AvatarId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("Rossgram.Domain.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<long>("AccountViewId")
                                .HasColumnType("bigint");

                            b1.Property<byte[]>("Hash")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.HasKey("AccountViewId");

                            b1.ToView("AccountView");

                            b1.WithOwner()
                                .HasForeignKey("AccountViewId");
                        });

                    b.Navigation("Avatar");

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("Rossgram.Domain.Views.MessageView", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Messages.Message", "AfterEditMessage")
                        .WithMany()
                        .HasForeignKey("AfterEditMessageId");

                    b.HasOne("Rossgram.Domain.Entities.Messages.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Entities.Account", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AfterEditMessage");

                    b.Navigation("Conversation");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Rossgram.Domain.Views.PostCommentView", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Account", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Entities.Posts.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Rossgram.Domain.Views.PostView", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Account", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.MessageFileAttachment", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.UploadedFile", "UploadedFile")
                        .WithOne()
                        .HasForeignKey("Rossgram.Domain.Entities.Messages.MessageFileAttachment", "UploadedFileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.MessageHistoryAttachment", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.History", "History")
                        .WithMany("MessagesAttachments")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.MessagePostAttachment", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Posts.Post", "Post")
                        .WithMany("MessagesAttachments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.PostView", null)
                        .WithMany("MessagesAttachments")
                        .HasForeignKey("PostViewId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.PrivateConversation", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.Account", "NewerAccount")
                        .WithMany("PrivateConversationsAsNewer")
                        .HasForeignKey("NewerAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.AccountView", null)
                        .WithMany("PrivateConversationsAsNewer")
                        .HasForeignKey("NewerAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Entities.Account", "OlderAccount")
                        .WithMany("PrivateConversationsAsOlder")
                        .HasForeignKey("OlderAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rossgram.Domain.Views.AccountView", null)
                        .WithMany("PrivateConversationsAsOlder")
                        .HasForeignKey("OlderAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NewerAccount");

                    b.Navigation("OlderAccount");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.PostAttachmentFile", b =>
                {
                    b.HasOne("Rossgram.Domain.Entities.UploadedFile", "UploadedFile")
                        .WithOne()
                        .HasForeignKey("Rossgram.Domain.Entities.Posts.PostAttachmentFile", "UploadedFileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Account", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("GroupsConversationsMember");

                    b.Navigation("Histories");

                    b.Navigation("MessagesLikes");

                    b.Navigation("PostCommentsLikes");

                    b.Navigation("Posts");

                    b.Navigation("PostsComments");

                    b.Navigation("PostsLikes");

                    b.Navigation("PrivateConversationsAsNewer");

                    b.Navigation("PrivateConversationsAsOlder");

                    b.Navigation("SentMessages");

                    b.Navigation("UploadedFiles");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.History", b =>
                {
                    b.Navigation("MessagesAttachments");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("BeforeEditMessage");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.Post", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("MessagesAttachments");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Posts.PostComment", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Rossgram.Domain.Views.AccountView", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("GroupsConversationsMember");

                    b.Navigation("MessagesLikes");

                    b.Navigation("PostCommentsLikes");

                    b.Navigation("Posts");

                    b.Navigation("PostsComments");

                    b.Navigation("PostsLikes");

                    b.Navigation("PrivateConversationsAsNewer");

                    b.Navigation("PrivateConversationsAsOlder");

                    b.Navigation("SentMessages");

                    b.Navigation("UploadedFiles");
                });

            modelBuilder.Entity("Rossgram.Domain.Views.MessageView", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("BeforeEditMessage");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Rossgram.Domain.Views.PostCommentView", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Rossgram.Domain.Views.PostView", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("MessagesAttachments");
                });

            modelBuilder.Entity("Rossgram.Domain.Entities.Messages.GroupConversation", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
